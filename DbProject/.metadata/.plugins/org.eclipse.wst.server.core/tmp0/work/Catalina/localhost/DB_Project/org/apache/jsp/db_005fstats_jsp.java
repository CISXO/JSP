/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2022-12-23 12:18:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class db_005fstats_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("  ");

Class.forName("org.mariadb.jdbc.Driver");
String jdbcDriver = "jdbc:mariadb://localhost:3306/homework";
String dbUser = "root";
String dbPass = "22489612up!";
String query = "select count(*) as head from headquarter";
String query2= "select count(*) as line from line";
String query3= "select count(*) as engineer from engineer";
String query4= "select count(*) as station from station";
String query5= "select count(*) as train from train";
String query6= "select count(*) as traincode from traincode";
String query7= "select count(*) as vehicle from vehicle";
String query8= "select count(*) as connect from connect";

Connection conn = null;
Statement stmt = null;
ResultSet result = null;

try {
	conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
	stmt = conn.createStatement();
	result = stmt.executeQuery(query);
	result.next();
	String head = result.getString("head");
	int head2 = Integer.parseInt(head);
	result= stmt.executeQuery(query2);
	result.next();
	String line = result.getString("line");
	int line2 = Integer.parseInt(line);
	result= stmt.executeQuery(query3);
	result.next();
	String engineer = result.getString("engineer");
	int engineer2 = Integer.parseInt(engineer);
	result= stmt.executeQuery(query4);
	result.next();
	String station = result.getString("station");
	int station2 = Integer.parseInt(station);
	result= stmt.executeQuery(query5);
	result.next();
	String train = result.getString("train");
	int train2 = Integer.parseInt(train);
	result= stmt.executeQuery(query6);
	result.next();
	String traincode = result.getString("traincode");
	int traincode2 = Integer.parseInt(traincode);
	result= stmt.executeQuery(query7);
	result.next();
	String vehicle = result.getString("vehicle");
	int vehicle2 = Integer.parseInt(vehicle);
	result= stmt.executeQuery(query8);
	result.next();
	String connect = result.getString("connect");
	int connect2 = Integer.parseInt(connect);
	
      out.write("\r\n");
      out.write("  \r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("      google.charts.load('current', {'packages':['corechart']});\r\n");
      out.write("      google.charts.setOnLoadCallback(drawChart);\r\n");
      out.write("\r\n");
      out.write("      function drawChart() {\r\n");
      out.write("\r\n");
      out.write("        var data = google.visualization.arrayToDataTable([\r\n");
      out.write("          ['name', 'score'],\r\n");
      out.write("          ['headquarter',     ");
      out.print(head2);
      out.write("],\r\n");
      out.write("          ['line',      ");
      out.print(line2);
      out.write("],\r\n");
      out.write("          ['engineer',      ");
      out.print(engineer2);
      out.write("],\r\n");
      out.write("          ['station',      ");
      out.print(station2);
      out.write("],\r\n");
      out.write("          ['train',      ");
      out.print(train2);
      out.write("],\r\n");
      out.write("          ['traincode',      ");
      out.print(traincode2);
      out.write("],\r\n");
      out.write("          ['vehicle',      ");
      out.print(vehicle2);
      out.write("],\r\n");
      out.write("          ['connect',      ");
      out.print(connect2);
      out.write("],\r\n");
      out.write("        ]);\r\n");
      out.write("\r\n");
      out.write("        var options = {\r\n");
      out.write("          title: 'db 통계'\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var chart = new google.visualization.PieChart(document.getElementById('piechart'));\r\n");
      out.write("\r\n");
      out.write("        chart.draw(data, options);\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("    </script>");

    	result.close();
	stmt.close();
	conn.close();
} catch(SQLException e) {
	out.println("err."+e.toString());
}
      out.write("\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div id=\"piechart\" style=\"width: 900px; height: 500px;\"></div>\r\n");
      out.write("     <iframe src=\"db_status2.jsp\" width=\"100%\" height=\"500\" frameborder=\"1\">\r\n");
      out.write("       </div>\r\n");
      out.write("  <br><h1>h2</h1>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
